# https://contest.yandex.ru/contest/26365/problems/E/
# E. Две фишки - 2
# Обратите внимание на ограничения в этой задаче.

# Рита и Гоша играют в игру. У Риты есть n фишек, на каждой из которых написано количество очков. Фишки лежат на столе в порядке неубывания очков на них. Сначала Гоша называет число k, затем Рита должна выбрать две фишки, сумма очков на которых равна заданному числу.

# Рите надоело искать фишки самой, и она решила применить свои навыки программирования для решения этой задачи. Помогите ей написать программу для поиска нужных фишек.

# Формат ввода
# В первой строке записано количество фишек n, 2 ≤ n ≤ 105.

# Во второй строке записано n целых чисел в порядке неубывания —– очки на фишках Риты в диапазоне от -105 до 105.

# В третьей строке —– загаданное Гошей целое число k, -105 ≤ k ≤ 105.

# Формат вывода
# Нужно вывести два числа —– очки на двух фишках, в сумме дающие k.

# Если таких пар несколько, то можно вывести любую из них.

# Если таких пар не существует, то вывести «None».


#  В первой строке записано количество фишек n
# n = int(input())
# #  Во второй строке записано n целых чисел —– очки на фишках
# q_list = list(map(int, input().split()))  
# # В третьей строке —– загаданное Гошей целое число k
# k = int(input())

file = open("input.txt", "r")
#  В первой строке записано количество фишек n
n = int(file.readline())
#  Во второй строке записано n целых чисел —– очки на фишках
q_list = list(map(int, file.readline(2).split()))
# В третьей строке —– загаданное Гошей целое число k
k = int(file.readline(3))
file.close()


def twosum_with_sort(numbers, X):
    # Сортируем исходный массив стандартной функцией.
    numbers.sort()

    left = 0
    right = len(numbers) - 1
    while left < right:
        current_sum = numbers[left] + numbers[right]
        if current_sum == X:
            return numbers[left], numbers[right]
        if current_sum < X:
            left += 1
        else:
            right -= 1
    # Если ничего не нашлось в цикле, значит, нужной пары элементов в массиве нет.
    return None, None        


# result = []  # Пустой массив.
result = twosum_with_sort(q_list, k)

if result[0] is None:
    print('None')
else:
    print(result[0], result[1])
    
